from flask import Flask, render_template, request
import folium
import json
import numpy as np
import os
import requests 

app = Flask(__name__)

# ƒê·∫£m b·∫£o th∆∞ m·ª•c Data t·ªìn t·∫°i
DATA_FOLDER = 'Data'
if not os.path.exists(DATA_FOLDER):
    os.makedirs(DATA_FOLDER)

# ƒê∆∞·ªùng d·∫´n ƒë·∫øn file GeoJSON (c·∫ßn t·∫£i file n√†y v√† ƒë·∫∑t v√†o th∆∞ m·ª•c Data)
GEOJSON_FILE = os.path.join(DATA_FOLDER, "gadm41_VNM_1.json")

# Bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ l·ªãch s·ª≠ tr√≤ chuy·ªán (trong b·ªô nh·ªõ, s·∫Ω m·∫•t khi server restart)
conversation_history = []

def create_pollution_map(pollution_data_input):
    """T·∫°o b·∫£n ƒë·ªì √¥ nhi·ªÖm d·ª±a tr√™n d·ªØ li·ªáu ƒë·∫ßu v√†o."""
    try:
        with open(GEOJSON_FILE, "r", encoding="utf-8") as file:
            geojson_data = json.load(file)
    except FileNotFoundError:
        return "L·ªói: Kh√¥ng t√¨m th·∫•y file GeoJSON. Vui l√≤ng t·∫£i file `gadm41_VNM_1.json` v√† ƒë·∫∑t v√†o th∆∞ m·ª•c `Data`."
    except json.JSONDecodeError:
        return "L·ªói: File GeoJSON kh√¥ng h·ª£p l·ªá."

    # pollution_data_input l√† dictionary c√≥ d·∫°ng [{ 'T√™n T·ªânh': {'AQI': ..., 'CO': ...}, ... },...]
    pollution_data = pollution_data_input 

    # Th√™m tooltip v√† m√†u s·∫Øc
    for feature in geojson_data["features"]:
        province = feature["properties"]["NAME_1"]
        pollution_info = pollution_data.get(province) # L·∫•y th√¥ng tin √¥ nhi·ªÖm cho t·ªânh

        if pollution_info:
            tooltip_content = (
                f"<div style='text-align:left; font-size:14px; padding-left:5px;'>"
                f"<b style='text-align:center; display:block; font-size:16px;'>{province}</b><br>"
                f"AQI: <b>{pollution_info.get('AQI', 'Kh√¥ng c√≥ d·ªØ li·ªáu')}</b><br>"
                f"CO: {pollution_info.get('CO', 'Kh√¥ng c√≥ d·ªØ li·ªáu')} ppm<br>"
                f"SO‚ÇÇ: {pollution_info.get('SO2', 'Kh√¥ng c√≥ d·ªØ li·ªáu')} ¬µg/m¬≥<br>"
                f"PM2.5: {pollution_info.get('PM2.5', 'Kh√¥ng c√≥ d·ªØ li·ªáu')} ¬µg/m¬≥</div>"
            )
        else:
            tooltip_content = (
                f"<div style='text-align:left; font-size:14px; padding-left:5px;'>"
                f"<b style='text-align:center; display:block; font-size:16px;'>{province}</b></div>"
            )
        feature["properties"]["tooltip_info"] = tooltip_content

    def get_color(aqi):
        if isinstance(aqi, (int, float)):
            if aqi <= 50:
                return "green"
            elif aqi <= 100:
                return "yellow"
            elif aqi <= 150:
                return "orange"
            elif aqi <= 200:
                return "red"
            else:
                return "purple"
        else:
            return "lightgray"

    pollution_map = folium.Map(location=[16.0, 108.0], zoom_start=6, tiles="cartodbpositron")

    folium.GeoJson(
        geojson_data,
        name="√î nhi·ªÖm kh√¥ng kh√≠",
        style_function=lambda feature: {
            "fillColor": get_color(
                # L·∫•y AQI t·ª´ d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω (pollution_data)
                float(pollution_data.get(feature["properties"]["NAME_1"], {}).get("AQI"))
                if pollution_data.get(feature["properties"]["NAME_1"], {}).get("AQI") is not None else None
            ),
            "color": "black",
            "weight": 1,
            "fillOpacity": 0.7,
        },
        tooltip=folium.GeoJsonTooltip(
            fields=["tooltip_info"],
            aliases=["Th√¥ng tin:"],
            labels=False,
            sticky=True,
            localize=True,
            style=("background-color: rgba(0, 0, 0, 0.85); color: white; font-size: 14px; "
                   "padding: 8px; border-radius: 8px; box-shadow: 2px 2px 10px rgba(0,0,0,0.5);"),
        ),
        highlight_function=lambda feature: {
            "weight": 3,
            "color": "blue",
            "fillOpacity": 0.9,
            "pane": "shadowPane"
        },
    ).add_to(pollution_map)

    # Ph·∫ßn legend_html (t·∫°o node HTML cho ch√∫ th√≠ch) ƒë∆∞·ª£c th√™m v√†o b·∫£n ƒë·ªì
    legend_html = """
    <div id="legend" style="position: fixed; bottom: 2%; right: 2%; width: 20%; min-width: 140px; max-width: 200px;
                                    background-color: rgba(255, 255, 255, 0.8); z-index:9999; font-size: 1rem;
                                    border-radius: 10px; padding: 1%; box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.3);">
    <b style="font-size: 1.2rem;">üìå Ch√∫ th√≠ch AQI</b><br><br>
    <div style="display: flex; align-items: center;">
        <span style="background-color:green; width: 1rem; height: 1rem; display:inline-block; border-radius: 5px; margin-right: 0.8rem;"></span>
        <span>T·ªët (0-50)</span>
    </div>
    <div style="display: flex; align-items: center; margin-top: 0.4rem;">
        <span style="background-color:yellow; width: 1rem; height: 1rem; display:inline-block; border-radius: 5px; margin-right: 0.8rem;"></span>
        <span>Trung b√¨nh (51-100)</span>
    </div>
    <div style="display: flex; align-items: center; margin-top: 0.4rem;">
        <span style="background-color:orange; width: 1rem; height: 1rem; display:inline-block; border-radius: 5px; margin-right: 0.8rem;"></span>
        <span>K√©m (101-150)</span>
    </div>
    <div style="display: flex; align-items: center; margin-top: 0.4rem;">
        <span style="background-color:red; width: 1rem; height: 1rem; display:inline-block; border-radius: 5px; margin-right: 0.8rem;"></span>
        <span>X·∫•u (151-200)</span>
    </div>
    <div style="display: flex; align-items: center; margin-top: 0.4rem;">
        <span style="background-color:purple; width: 1rem; height: 1rem; display:inline-block; border-radius: 5px; margin-right: 0.8rem;"></span>
        <span>Nguy h·∫°i (>200)</span>
    </div>
    <div style="display: flex; align-items: center; margin-top: 0.4rem;">
        <span style="background-color:lightgray; width: 1rem; height: 1rem; display:inline-block; border-radius: 5px; margin-right: 0.8rem;"></span>
        <span>Kh√¥ng c√≥ d·ªØ li·ªáu</span>
    </div>
    </div>
    <script>
    function resizeLegend() {
        var legend = document.getElementById('legend');
        var windowWidth = window.innerWidth;
        var fontSize = Math.min(Math.max(windowWidth * 0.01, 12), 16); // Font t·ª´ 12px ƒë·∫øn 16px
        legend.style.fontSize = fontSize + 'px';
    }
    window.addEventListener('resize', resizeLegend);
    window.addEventListener('load', resizeLegend);
    </script>
    """
    pollution_map.get_root().html.add_child(folium.Element(legend_html))


    # L∆∞u b·∫£n ƒë·ªì v√†o m·ªôt file t·∫°m
    temp_map_path = "temp_map.html"
    pollution_map.save(temp_map_path)
    with open(temp_map_path, 'r', encoding='utf-8') as f:
        map_html = f.read()
    os.remove(temp_map_path) # X√≥a file t·∫°m sau khi ƒë·ªçc
    return map_html


@app.route("/", methods=["GET", "POST"])
def index():
    global conversation_history
    map_html = ""
    error_message = None
    user_input = None
    pollution_data_for_map = {} # Dictionary ƒë·ªÉ l∆∞u d·ªØ li·ªáu √¥ nhi·ªÖm cho h√†m t·∫°o b·∫£n ƒë·ªì

    if request.method == "POST":
        user_input = request.form["pollution_data"]
        conversation_history.append({"sender": "user", "text": user_input})

        # G·ª≠i d·ªØ li·ªáu ng∆∞·ªùi d√πng nh·∫≠p (d·∫°ng text) tr·ª±c ti·∫øp ƒë·∫øn webhook
        data_to_send = user_input
        webhook_url = "https://complete-truly-silkworm.ngrok-free.app/webhook-test/bba167cb-8a60-4692-a09b-9e4f941c0d6c"
        headers = {'Content-Type': 'text/plain'} # G·ª≠i d·∫°ng text/plain

        try:
            # G·ª≠i d·ªØ li·ªáu ng∆∞·ªùi d√πng nh·∫≠p d∆∞·ªõi d·∫°ng text
            response = requests.post(webhook_url, data=data_to_send, headers=headers)
            response.raise_for_status() # S·∫Ω n√©m l·ªói n·∫øu status code l√† 4xx ho·∫∑c 5xx

            try:
                webhook_response = response.json() # Parse ph·∫£n h·ªìi JSON

                # X·ª≠ l√Ω ƒë·ªãnh d·∫°ng JSON t·ª´ webhook (object ch·ª©a c√°c m·∫£ng)
                chatbot_reply = webhook_response.get("reply")# L·∫•y ph·∫£n h·ªìi chatbot
                locations = webhook_response.get("location") # L·∫•y m·∫£ng locations
                aqis = webhook_response.get("AQI")           # L·∫•y m·∫£ng AQIs
                cos = webhook_response.get("CO")             # L·∫•y m·∫£ng COs
                so2s = webhook_response.get("SO2")           # L·∫•y m·∫£ng SO2s
                pm25s = webhook_response.get("PM25")         # L·∫•y m·∫£ng PM25s

                if chatbot_reply:
                    conversation_history.append({"sender": "bot", "text": chatbot_reply})

                # Ki·ªÉm tra xem c√°c m·∫£ng c√≥ t·ªìn t·∫°i v√† c√≥ c√πng ƒë·ªô d√†i kh√¥ng
                if (isinstance(locations, list) and
                    isinstance(aqis, list) and
                    isinstance(cos, list) and
                    isinstance(so2s, list) and
                    isinstance(pm25s, list) and
                    len(locations) > 0 and # ƒê·∫£m b·∫£o c√≥ √≠t nh·∫•t 1 ƒë·ªãa ƒëi·ªÉm
                    len(locations) == len(aqis) == len(cos) == len(so2s) == len(pm25s)):
                    
                    # X√¢y d·ª±ng dictionary d·ªØ li·ªáu √¥ nhi·ªÖm cho h√†m t·∫°o b·∫£n ƒë·ªì
                    pollution_data_for_map = {}
                    for i in range(len(locations)):
                        location_name = locations[i]
                        # ƒê·∫£m b·∫£o location_name l√† string v√† kh√¥ng r·ªóng
                        if isinstance(location_name, str) and location_name:
                            # C·ªë g·∫Øng chuy·ªÉn ƒë·ªïi c√°c gi√° tr·ªã sang float, b·ªè qua n·∫øu l·ªói ho·∫∑c gi√° tr·ªã r·ªóng
                            try:
                                aqi_val = float(aqis[i]) if (aqis[i] is not None and aqis[i] != '') else None
                            except (ValueError, TypeError):
                                aqi_val = None

                            try:
                                co_val = float(cos[i]) if (cos[i] is not None and cos[i] != '') else None
                            except (ValueError, TypeError):
                                co_val = None

                            try:
                                so2_val = float(so2s[i]) if (so2s[i] is not None and so2s[i] != '') else None
                            except (ValueError, TypeError):
                                so2_val = None

                            try:
                                pm25_val = float(pm25s[i]) if (pm25s[i] is not None and pm25s[i] != '') else None
                            except (ValueError, TypeError):
                                pm25_val = None

                            pollution_data_for_map[location_name] = {
                                "AQI": aqi_val,
                                "CO": co_val,
                                "SO2": so2_val,
                                "PM2.5": pm25_val
                            }

                    # T·∫°o b·∫£n ƒë·ªì n·∫øu c√≥ d·ªØ li·ªáu ƒë·ªãa ƒëi·ªÉm h·ª£p l·ªá ƒë∆∞·ª£c thu th·∫≠p
                    if pollution_data_for_map:
                        map_html = create_pollution_map(pollution_data_for_map)
                        # Ki·ªÉm tra l·ªói tr·∫£ v·ªÅ t·ª´ h√†m t·∫°o map
                        if isinstance(map_html, str) and "L·ªói:" in map_html:
                             error_message = map_html
                             map_html = ""
                    # else: # Kh√¥ng c√≥ d·ªØ li·ªáu map h·ª£p l·ªá nh∆∞ng c√≥ th·ªÉ c√≥ reply
                         # pass


                # else: # Ph·∫£n h·ªìi kh√¥ng ch·ª©a m·∫£ng d·ªØ li·ªáu map h·ª£p l·ªá
                     # pass # C√≥ th·ªÉ ch·ªâ c√≥ reply


            except json.JSONDecodeError:
                # L·ªói n·∫øu ph·∫£n h·ªìi kh√¥ng ph·∫£i l√† JSON
                error_message = "Ph·∫£n h·ªìi t·ª´ webhook kh√¥ng ph·∫£i l√† ƒë·ªãnh d·∫°ng JSON h·ª£p l·ªá."
            except Exception as e:
                # L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu JSON ho·∫∑c t·∫°o map
                error_message = f"ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω ph·∫£n h·ªìi webhook: {e}"
        except requests.exceptions.RequestException as e:
            # L·ªói khi g·ªçi webhook
            error_message = f"L·ªói khi g·ªçi webhook: {e}"
            if hasattr(response, 'text'):
                error_message += f" - N·ªôi dung ph·∫£n h·ªìi: {response.text}"
        except Exception as e:
            # L·ªói t·ªïng qu√°t kh√°c
            error_message = f"ƒê√£ x·∫£y ra l·ªói t·ªïng qu√°t: {e}"

    # Khi trang load l·∫ßn ƒë·∫ßu (GET request) ho·∫∑c sau POST, render template
    return render_template("index.html", map_html=map_html, error_message=error_message, conversation=conversation_history)


if __name__ == "__main__":
    app.run(debug=True)